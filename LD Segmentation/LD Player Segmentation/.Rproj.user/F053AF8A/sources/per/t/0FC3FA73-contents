---
title: "LD Player Segmentation"
author: "BI Team"
date: "`r Sys.Date()`"
output: 
  html_document:
    theme: cosmo
    toc: TRUE
    toc_depth: 4
    toc_float: TRUE
    collapse: false
    smooth_scroll: TRUE
    fig_width: 4
    highlight: tango
    
---
<style type="text/css">

.list-group-item.active, .list-group-item.active:focus, .list-group-item.active:hover {
    background-color: Steelblue;
    font-weight: bold;
}

body{ 
      font-size: 15px;
      font-family::"Calibri (Body)";
      background-color:white;
  }
td {  
  font-size: 15px;
  font-family:"Calibri (Body)";
}
h1.title {
  font-size: 30px;
  font-family:"Calibri (Body)";
  color: Steelblue;
  font-weight: bold;
  text-align:center;
}

h4.author{ 
  font-size: 16px;
  color: black;
  font-family: "Calibri (Body)";
  font-style:italic;
  font-weight:normal;
} 
h4.date{ 
  font-size: 16px;
  font-family:"Calibri (Body)";
  color: black;
  font-style:italic;
  font-weight:normal;
} 
h1 {
  font-size: 27px;
  font-family:"Calibri (Body)";
  color:#30300A.;
  font-weight: bold;
}
h2 { 
   font-size: 25px;
   font-family:"Calibri (Body)";
   color:#30300A.;
   font-weight: bold;
}
h3{ 
  font-size: 21px;
  font-family:"Calibri (Body)";
  color:#30300A.;
  font-weight: bold;
}
h4{ 
  font-size: 19px;
  font-family:"Calibri (Body)";
  color:#30300A.;
  font-weight: bold;
}
h5{ 
  font-size: 17px;
  font-family:"Calibri (Body)";
  color:#30300A.;
  font-weight: bold;
}
code.r{ 
    font-size: 11px;
}
pre { 
    font-size: 11px;
    width: 4000px;
    border:0;
    text-align:top;
    height: 1800;
    overflow: auto;
}
pre code {
  word-wrap: normal;
  overflow: auto;
  
body.main-container {
  max-width: 1600px;
  width: auto;
}
body {
  max-width: 1600px;
}
}

.nav-pills>li>a:hover, .nav-pills>li>a:focus, .nav-pills>li.active>a, .nav-pills>li.active>a:hover, .nav-pills>li.active>a:focus{
     background-color: Steelblue;
     font-weight: bold;
     color: white;
}
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}
  
</style>

```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r, echo = FALSE, include=TRUE}
setwd("C://Users//raymart.biasbas//Documents//Proyekto//LD Segmentation//LD Player Segmentation")

getwd()

if (!require(DBI)) install.packages("DBI")
if (!require(odbc)) install.packages("odbc")
if (!require(keyring)) install.packages("keyring")
if (!require(dplyr)) install.packages("dplyr")
if (!require(factoextra)) install.packages("factoextra")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(tidyr)) install.packages("tidyr")
if (!require(datawizard)) install.packages("datawizard")





```

```{r, echo = FALSE, include=TRUE}

con <- dbConnect(odbc(),"DWH",
                   uid = key_get("db_user"),
                   pwd = key_get("db_pass"),
                  encoding = "UTF-8")

ld_df_raw <- dbGetQuery(con,"
              With lt as (
              SELECT
              Playerid
              ,Currencycode
              ,[Game Type] 
              ,[Vendor Name] 
              ,sum([Active Days Per Month]) LT_Active_Days
              ,sum([Bet Count]) LT_Bet_Count
              ,sum([Turnover Usd]) LT_Turnover_USD
              ,sum([Ggr Usd]) LT_GGR_USD
              FROM ref_db.ray.ld_players_data (nolock)
              GROUP BY
              Playerid
              ,Currencycode
              ,[Game Type] 
              ,[Vendor Name]
              )
              SELECT 
              t.*
              ,lt.LT_Active_Days
              ,lt.LT_Bet_Count
              ,lt.LT_Turnover_USD
              ,lt.LT_GGR_USD
              FROM ref_db.ray.ld_players_data t (nolock) 
              LEFT JOIN lt on t.Playerid = lt.Playerid
              and t.Currencycode = lt.Currencycode
              and t.[Game Type] = lt.[Game Type]
              and t.[Vendor Name] = lt.[Vendor Name]
              WHERE 1=1
              AND [Activity Month] = DATEADD(day,1,EOMONTH(cast(dateadd(hour,8,GETDATE()) as DATE),-2))
              AND ISNULL(lt.LT_Bet_Count,0) > 1
                        ")
  

  
ld_df <- ld_df_raw |>
  mutate(Playerid = as.integer(Playerid),
         `Activity Month` = as.Date(`Activity Month`))

str(ld_df)

## Data Cleaning
ld_df[ld_df$`Turnover Usd` == 0 & ld_df$`Ggr Usd` == 0 |
        ld_df$`Bet Count` == 0,] <- NA

ld_cleaned <- ld_df |>
  drop_na() 

str(ld_cleaned)

# ld_cleaned <- ld_cleaned |>
#   group_by(Playerid,`Game Type`,`Vendor Name`) |>
#   arrange(`Activity Month`) |>
#   mutate(LT_Active_Days = cumsum(`Active Days Per Month`),
#          LT_Bet_Count = cumsum(`Bet Count`),
#          LT_Turnover_USD = cumsum(`Turnover Usd`),
#          LT_GGR_USD = cumsum(`Ggr Usd`))



scoring <- function(x) {
  res <- as.integer()
  for(i in 1:length(x)) {
    if(x[i] >= 3.5) {
     res[i] <- 4
    } 
    else if (x[i] >= 0 & x[i] < 3.5){
      res[i] <- 3
    }
    else if (x[i] > -3.5 & x[i] < 0){
      res[i] <- 2
    }
    else if (x[i] <= -3.5) {
      res[i] <- 1
    }
    else{res[i] <- 0}
    
  }
  res
  
}

r.zscore <- function(x) coalesce((x-median(x,na.rm=T))/mad(x,na.rm = T),0)


Segments <- function(x) {
  res <- c()

  for(i in 1:length(x)) {
    if (x[i] == 444) {
      res[i] <- "Profitable Outlier"
    }
    else if (x[i] >= 311 & x[i] < 444 ) {
      res[i] <- "Profitable"
    }
    else if (x[i] > 144 & x[i] < 311 | x[i] < 144) {
      res[i] <- "Grinder"
    }
    else if (x[i] == 144) {
      res[i] <- "Grinder Outlier"
    } else {NULL}
    
  }
  res
  

}


```

## OverAll Lifetime 
```{r}
ld_per_player <- ld_cleaned |>
  group_by(Playerid,`Activity Month`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,
         LT_Bet_Count = sum(LT_Bet_Count),
         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),
         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>
  ungroup() |>
  mutate(
       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),
       LT_Bet_Count_scale = r.zscore(LT_Bet_Count),
       LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),
       LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))


ld_per_player <- ld_per_player |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,
       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),
       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),
       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),
       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)

ld_per_player <- ld_per_player |>
  mutate(Overall.Month.Segment = Segments(Month_Overall_score),
         Overall.LT.Segment = Segments(LT_Overall_score))
```
## Per Currency
```{r}
ld_per_player_curr <- ld_cleaned |>
  group_by(Playerid,Currencycode,`Activity Month`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,
         LT_Bet_Count = sum(LT_Bet_Count),
         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),
         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>
  ungroup()

ld_per_player_curr <- ld_per_player_curr |>
  group_by(Currencycode,`Activity Month`) |>
  mutate(
     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),
     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),
     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),
     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))


sapply(ld_per_player_curr,function(x)sum(is.na(x)))

ld_per_player_curr <- ld_per_player_curr |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,
       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),
       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),
       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),
       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)

ld_per_player_curr <- ld_per_player_curr |>
  mutate(Currency.Month.Segment = Segments(Month_Overall_score),
         Currency.LT.Segment = Segments(LT_Overall_score))                                                
```
_
## Per GameType
```{r}
ld_per_player_game <- ld_cleaned |>
  group_by(Playerid,`Activity Month`,`Game Type`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,
         LT_Bet_Count = sum(LT_Bet_Count),
         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),
         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>
  ungroup()

ld_per_player_game <- ld_per_player_game |>
  group_by(`Game Type`,`Activity Month`) |>
  mutate(
     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),
     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),
     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),
     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))


sapply(ld_per_player_game,function(x)sum(is.na(x)))

ld_per_player_game <- ld_per_player_game |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,
       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),
       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),
       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),
       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)

ld_per_player_game <- ld_per_player_game |>
  mutate(GameType.Month.Segment = Segments(Month_Overall_score),
         GameType.LT.Segment = Segments(LT_Overall_score))  

```

## Per Vendor
```{r}
ld_per_player_Vendor <- ld_cleaned |>
  group_by(Playerid,`Activity Month`,`Vendor Name`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,
         LT_Bet_Count = sum(LT_Bet_Count),
         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),
         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>
  ungroup()

ld_per_player_Vendor <- ld_per_player_Vendor |>
  group_by(`Vendor Name`,`Activity Month`) |>
  mutate(
     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),
     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),
     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),
     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))






ld_per_player_Vendor <- ld_per_player_Vendor |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,
       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),
       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),
       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),
       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)

ld_per_player_Vendor <- ld_per_player_Vendor |>
  mutate(Vendor.Month.Segment = Segments(Month_Overall_score),
         Vendor.LT.Segment = Segments(LT_Overall_score))  
```

## Per Currency
```{r}
ld_per_month_curr <- ld_cleaned |>
  group_by(Playerid,Currencycode,`Activity Month`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>
  ungroup() 

ld_per_month_curr <- ld_per_month_curr |>
  group_by(Currencycode,`Activity Month`) |>
  mutate(
       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),
       median = median(Month_Bet_Count),
       mad = mad(Month_Bet_Count))


sapply(ld_per_month_curr,function(x)sum(is.na(x)))


test <- ld_per_month_curr[!complete.cases(ld_per_month_curr),]

ld_per_month_curr <- ld_per_month_curr |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Curreny_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)

ld_per_month_curr <- ld_per_month_curr |>
  mutate(Month.Currency.Segment = Segments(Month_Curreny_score))

```

## Per GameType
```{r}
ld_per_month_gamet <- ld_cleaned |>
  group_by(Playerid,`Game Type`,`Activity Month`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>
  ungroup() 

ld_per_month_gamet <- ld_per_month_gamet |>
  group_by(`Game Type`,`Activity Month`) |>
  mutate(
       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD))


sapply(ld_per_month_gamet,function(x)sum(is.na(x)))

ld_per_month_gamet <- ld_per_month_gamet |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Game_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)

ld_per_month_gamet <- ld_per_month_gamet |>
  mutate(Month.Game.Segment = Segments(Month_Game_score))

```

## Per Vendor
```{r}
ld_per_month_vendor <- ld_cleaned |>
  group_by(Playerid,`Vendor Name`,`Activity Month`) |>
  reframe(
         Month_Bet_Count = sum(`Bet Count`),
         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,
         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>
  ungroup() 

ld_per_month_vendor <- ld_per_month_vendor |>
  group_by(`Vendor Name`,`Activity Month`) |>
  mutate(
       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),
       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),
       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD))


sapply(ld_per_month_vendor,function(x)sum(is.na(x)))

ld_per_month_vendor <- ld_per_month_vendor |>
   mutate(
       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),
       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),
       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),
       Month_Vendor_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)

ld_per_month_vendor <- ld_per_month_vendor |>
  mutate(Month.Vendor.Segment = Segments(Month_Vendor_score))

```

```{r}
ld_full <- ld_cleaned |>
  left_join(ld_per_player |>
              select(`Activity Month`,Playerid,Overall.Month.Segment,Overall.LT.Segment),
            by = c("Activity Month","Playerid")) |>
  left_join(ld_per_player_curr |>
              select(`Activity Month`,Playerid,Currencycode,
                     Currency.Month.Segment,Currency.LT.Segment),
            by = c("Activity Month","Playerid","Currencycode")) |>
  left_join(ld_per_player_game |>
              select(`Activity Month`,Playerid,`Game Type`,
                     GameType.Month.Segment,GameType.LT.Segment),
            by = c("Activity Month","Playerid","Game Type")) |>
  left_join(ld_per_player_Vendor |>
              select(`Activity Month`,Playerid,`Vendor Name`,
                     Vendor.Month.Segment,Vendor.LT.Segment),
            by = c("Activity Month","Playerid","Vendor Name"))
  
colnames(ld_full) <- gsub(" ","",gsub("\\.","",colnames(ld_full)))

```

```{r}
mytable <- dbConnect(odbc(),"ref_db",
                       uid = key_get("db_user"),
                       pwd = key_get("db_pass"))

dbWriteTable(mytable,SQL("ref_db.ray.ld_segmentation"),ld_full,append = T)


```






