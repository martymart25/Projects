median_diff_overall1 <- median_diff_overall1 |> scales::dollar()
cond_overall1 <- ifelse(overall_test1$p.value <= 0.05
, paste0(" the FTDs first deposit is significantly ", high_low1," compared to second deposit with a mean difference of<b> ",mean_diff_overall1," </b> and a median difference of<b> ",median_diff_overall1,"</b>.")
,paste0(" the FTDs first deposit is ", high_low," compared to second deposit with a mean difference of<b> ",mean_diff_overall1," </b> and a median difference of<b> ",median_diff_overall1," </b>. However the difference is not statistically significant."))
std_uap1 <- df_summary$UAP[tolower(df_summary$DepositType) %like% 'std%'] |> scales::comma()
std_pct1 <- (df_summary$UAP[tolower(df_summary$DepositType) %like% 'std%']/df_summary$UAP[tolower(df_summary$DepositType) %like% 'ftd%']) |> scales::percent()
ftd_mean1 <- df_summary1$mean[tolower(df_summary1$DepositType) %like% 'ftd%'] |> scales::dollar()
std_mean1 <- df_summary1$mean[tolower(df_summary1$DepositType) %like% 'std%'] |> scales::dollar()
ftd_median1 <- df_summary1$median[tolower(df_summary1$DepositType) %like% 'ftd%'] |> scales::dollar()
std_median1 <- df_summary1$median[tolower(df_summary1$DepositType) %like% 'std%'] |> scales::dollar()
ftd_tot1 <- df_summary1$total[tolower(df_summary1$DepositType) %like% 'ftd%'] |> scales::dollar()
std_tot1 <- df_summary1$total[tolower(df_summary1$DepositType) %like% 'std%'] |> scales::dollar()
p2 <- paste0("Looking at FTDs with second deposits, only <b>" ,paste0(std_pct1," (",std_uap1,")"), "</b> of the FTDs has made second deposits."
," These FTDs generated a total of <b>",ftd_tot1, "</b> first deposit amount with mean at <b>",ftd_mean1,"</b> and median at <b>",ftd_median1,"</b>."
," Additionally, they also generated a total of <b>",std_tot1,"</b>  second deposit amount with mean at <b>",std_mean1,"</b> and median at <b>",std_median1 ,"</b>."
," Moreover,",cond_overall1)
model <- lm(STD_Amount_USD~Viplevel, data = df)
anova <- anova(model)
anova_pval <- anova$`Pr(>F)`[1]
cont_tbl <- table(df$Viplevel,df$has_STD)
prop <- prop.table(cont_tbl,margin = 1) |> as.data.frame()
prop$Freq[prop$Var1 == 'Diamond' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01)
chsq <- chisq.test(cont_tbl)
p3 <- if(anova_pval <= 0.05) {
paste0("Based on ANOVA analysis, there is a strong evidence that VIP level significantly affects the FTDs' making second deposit. This implies that the FTDs' VIP level plays a notable role in determining whether FTDs' will make a second deposit.")
} else {
paste0("Based on ANOVA analysis, there is a strong evidence that VIP level does not affect the FTDs' making second deposit. This implies that the FTDs' VIP level does not play a notable role in determining whether FTDs' will make a second deposit.")
}
p3.1 <- paste0("Diamond-tier FTDs have a <b>", prop$Freq[prop$Var1 == 'Diamond' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01),"</b> likelihood of making a second deposit, Platinum-tier FTDs exhibit a high likelihood at <b>",prop$Freq[prop$Var1 == 'Platinum' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01),"</b>, Gold-tier FTDs follow closely at <b>",prop$Freq[prop$Var1 == 'Gold' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01),"</b>, and Silver-tier FTDs also show a significant likelihood at <b>",prop$Freq[prop$Var1 == 'Silver' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01),"</b> for making second deposits. And, Bronze-tier FTDs has <b>",prop$Freq[prop$Var1 == 'Bronze' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01),"</b> likelihood of making second deposit. Importantly, these likelihoods are statistically significant, highlighting the considerable impact of VIP levels on FTDs' second deposit behavior.")
p4 <- paste0("It is important to note that, despite the fact that 75 percent of the FTDs' first deposit are below <b>",df_summary$Q3[tolower(df_summary$DepositType) %like% 'ftd%'] |> scales::dollar(accuracy = 0.01),"</b> and second deposit below <b>",df_summary$Q3[tolower(df_summary$DepositType) %like% 'std%']|> scales::dollar(accuracy = 0.01),"</b>, the presence of outliers is not observed in the data. The skewed distribution is indicative of the majority of values clustering towards the lower end, which contributes to the skewness, rather than the existence of extreme or outlier values.")
intro <- paste0("In this section, will conduct an analysis to determine whether there is a statistically significant difference between the First-Time Depositors' (FTDs) first deposit amounts and second deposit amounts within each of the different currencies. Additionally, will specifically focus on the subset of FTDs who have made a second deposit and assess if there is a significant difference between their first and second deposit amounts in each of the currencies. This analysis aims to understand if the currency has a significant effect on FTDs making a second deposit. The data used in this analysis spans from January 1, 2023, to September 30, 2023.")
total_diff_currency <- (df_curr_summary$`total FTD_Amount_USD`[df_curr_summary$Currency == "CNY"]- df_curr_summary$`total STD_Amount_USD`[df_curr_summary$Currency == "CNY"])
mean_diff_currency <- (df_curr_summary$`mean FTD_Amount_USD`[df_curr_summary$Currency == "CNY"]- df_curr_summary$`mean STD_Amount_USD`[df_curr_summary$Currency == "CNY"])
mean_diff_currency <- mean_diff_currency |> scales::dollar()
high_low_curr <- ifelse(mean_diff_currency > 0,'higher','lower')
inc_dec <-ifelse(mean_diff_currency > 0,'increase','decrease')
median_diff_currency <- (df_curr_summary$`median FTD_Amount_USD`[df_curr_summary$Currency == "CNY"]- df_curr_summary$`median STD_Amount_USD`[df_curr_summary$Currency == "CNY"])
median_diff_currency <- median_diff_currency |> scales::dollar()
cond_currency <- ifelse(currency_test$p[currency_test$Currency == 'CNY'] <= 0.05
, paste0("  the first deposit for these FTDs is significantly ", high_low1,"  compared to the second deposit, with a mean difference of <b> ",mean_diff_currency," </b> and a median difference of <b> ",median_diff_currency,"</b>.",
"This data suggests a substantial ",inc_dec," in deposit amounts between the first and second deposits for FTDs in CNY, highlighting a distinct deposit behavior in this currency.")
, paste0("  the first deposit for these FTDs is insignificantly ", high_low1,"  compared to the second deposit, with a mean difference of <b> ",mean_diff_currency," </b> and a median difference of <b> ",median_diff_currency,"</b>."))
p1 <- paste0('In CNY, a total of <b>',df_curr_summary$UAP[df_curr_summary$Currency == "CNY"] |> scales::comma(),"</b> First-Time Depositors (FTDs)"
," collectively generated a total first deposit amount of <b>",df_curr_summary$`total FTD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(),"</b>, with a mean of <b>",df_curr_summary$`mean FTD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(), "</b> and median of <b>",df_curr_summary$`median FTD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(),"</b>."
," Additionally,they accumulated a total second deposit amount of <b>",df_curr_summary$`total STD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(),"</b>, with a mean of <b>",df_curr_summary$`mean STD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(),"</b> and median of <b>",df_curr_summary$`median STD_Amount_USD`[df_curr_summary$Currency == "CNY"] |> scales::dollar(),"</b>."
," Notably,",cond_currency)
# dbDisconnect(duckdb_conn,shutdown = TRUE)
df_curr_summary$UAP[df_curr_summary$Currency == "CNY"] |> scales::comma()
View(df_curr_summary)
total_diff_currency1 <- (df_curr_summary1$`total FTD_Amount_USD`[df_curr_summary1$Currency == "CNY"]- df_curr_summary1$`total STD_Amount_USD`[df_curr_summary1$Currency == "CNY"])
mean_diff_currency1 <- (df_curr_summary1$`mean FTD_Amount_USD`[df_curr_summary1$Currency == "CNY"]- df_curr_summary1$`mean STD_Amount_USD`[df_curr_summary1$Currency == "CNY"])
mean_diff_currency1 <- mean_diff_currency1 |> scales::dollar()
high_low_curr <- ifelse(mean_diff_currency1 > 0,'higher','lower')
inc_dec <-ifelse(mean_diff_currency1 > 0,'increase','decrease')
median_diff_currency1 <- (df_curr_summary1$`median FTD_Amount_USD`[df_curr_summary1$Currency == "CNY"]- df_curr_summary1$`median STD_Amount_USD`[df_curr_summary1$Currency == "CNY"])
median_diff_currency1 <- median_diff_currency1 |> scales::dollar()
cond_currency1 <- if(currency_test1$p[currency_test1$Currency == 'CNY'] <= 0.05) {
paste("Moreover, the FTDs' first deposit amount is significantly lower compared to the second deposit amount.")
} else {
paste("Moreover, the FTDs' first deposit amount is insignificantly lower compared to the second deposit amount.")
}
p2 <- paste0("Specifically, among those who made second deposits, a total of n FTDs generated a cumulative first deposit amount of $X, with a mean of $Y and a median of $Z.")
View(currency_test)
model <- lm(STD_Amount_USD~Currency, data = df)
model
anova <- anova(model)
anova
cont_tbl <- table(df$Currency,df$has_STD)
cont_tbl
prop
prop <- prop.table(cont_tbl,margin = 1) |> as.data.frame()
prop
prop$Freq[prop$Var1 == 'Diamond' & prop$Var2 == 1] |> scales::percent(accuracy = 0.01)
prop
chsq <- chisq.test(cont_tbl)
chsq
View(prop)
View(prop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
df_summary$mean[tolower(df_summary$DepositType) %like% 'ftd%']
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
if(!require(odbc)) install.packages("odbc")
if(!require(DBI)) install.packages("DBI")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
if(!require(keyring)) install.packages("keyring")
if(!require(duckdb)) install.packages("duckdb")
if(!require(arrow)) install.packages("arrow")
if(!require(dbplyr)) install.packages("dbplyr")
if(!require(tidyr)) install.packages("tidyr")
if(!require(DescTools)) install.packages("DescTools")
if(!require(scales)) install.packages("scales")
if(!require(rstatix)) install.packages("rstatix")
## duckdb
# Define the database name
db_name <- "your_database_name"
# Define the directory where you want to store the database
db_directory <- "C:/Users/raymart.biasbas/Documents/Proyekto/First Deposit vs Second Deposit"
# Create the full database path
db_path <- file.path(db_directory, paste0(db_name, ".db"))
duckdb_conn <- dbConnect(duckdb(), dbname = db_path)
#Connect to DWH
# dwh_conn <- dbConnect(odbc(), "DWH", uid = key_get("db_user"),
#     pwd = key_get("db_pass"), encoding = "UTF-8")
# df <- dbGetQuery(dwh_conn,"
#                  			SELECT
#               				dp.Id
#               				,dc.Code Currency
#                               ,dateadd(hour,8,FirstDepositDate) FTD_Date
#                               ,dp.FirstDepositAmount/FirstDepositExchRate FTD_Amount_USD
#                               ,dpl.Viplevel
#                               ,sec_dep.STD_Date
#                               ,isnull(sec_dep.STD_Amount_USD,0) STD_Amount_USD
#                               FROM DWH.WH.DimPlayer dp with (nolock)
#                               INNER JOIN DWH.WH.DimCurrency dc with (nolock) on dp.CurrencyID = dc.Id
#                               INNER JOIN DWH.WH.DimLoyaltyProgramLevel dpl with  (nolock) on dp.VIPLevelId = dpl.Id
#                               LEFT JOIN (
#                               	SELECT
#                               	pt.PlayerId
#                               	,dateadd(hour,8,pt.StartTime) STD_Date
#                               	,pt.Amount/isnull(fx.rate,1) STD_Amount_USD
#                               	,row_number() over (partition by pt.playerid order by pt.StartTime) rankie
#                               	FROM DWH.Payment.PaymentTransaction pt with (nolock)
#                                   INNER JOIN DWH.WH.DimTime dt with (nolock) on pt.TimeId = dt.Id
#                                   INNER JOIN DWH.WH.FactExchangeRates fx with (nolock) on dt.TimeId12MNUTC0 = fx.TimeId
#                                   and pt.CurrencyId = fx.CurrencyId
#                                   WHERE 1=1
#                                   AND pt.StartTime >= dateadd(hour,-8,'2023-01-01')
#                               AND pt.StartTime < dateadd(hour,-8,'2023-10-01')
#                               AND pt.TransactionTypeId in (1,27)
#                           	  AND pt.StatusId = 3
#                           ) sec_dep on dp.Id = sec_dep.PlayerId and rankie = 2
#                           WHERE 1=1
#                           AND dp.BrandId = 2
#                           AND dp.IsInternalAccount = 0
#                           AND dp.City != 'm_test_only'
#                           AND NOT dp.RisklevelName in ('Affiliate','Test')
#                           AND dc.Code in ('VND','CNY','THB','IDR')
#                           AND dp.FirstDepositDate >= dateadd(hour,-8,'2023-01-01')
#                           AND dp.FirstDepositDate < dateadd(hour,-8,'2023-10-01')
# ")
#
# total_dep <- dbGetQuery(dwh_conn,"
#                         SELECT
#                         pt.PlayerId
#                         ,sum(pt.Amount/isnull(fx.rate,1)) Deposit_Amount_USD
#                         FROM DWH.Payment.PaymentTransaction pt with (nolock)
#                         INNER JOIN DWH.WH.DimPlayer dp with (nolock) on pt.PlayerID = dp.Id
#                         INNER JOIN DWH.WH.DimCurrency dc with (nolock) on dp.CurrencyID = dc.Id
#                         INNER JOIN DWH.WH.DimTime dt with (nolock) on pt.TimeId = dt.Id
#                         INNER JOIN DWH.WH.FactExchangeRates fx with (nolock) on dt.TimeId12MNUTC0 = fx.TimeId
#                         and pt.CurrencyId = fx.CurrencyId
#                         WHERE 1=1
#                         AND pt.StartTime >= dateadd(hour,-8,'2023-01-01')
#                         AND pt.StartTime < dateadd(hour,-8,'2023-10-01')
#                         AND pt.TransactionTypeId in (1,27)
#                         AND pt.StatusId = 3
#                         AND dp.BrandId = 2
#                         AND dp.IsInternalAccount = 0
#                         AND dp.City != 'm_test_only'
#                         AND NOT dp.RisklevelName in ('Affiliate','Test')
#                         AND dc.Code in ('VND','CNY','THB','IDR')
#                         AND dp.FirstDepositDate >= dateadd(hour,-8,'2023-01-01')
#                         AND dp.FirstDepositDate < dateadd(hour,-8,'2023-10-01')
#                         GROUP BY
#                         pt.PlayerId"
# )
#
#
# dbDisconnect(dwh_conn)
#
# saveRDS(df,file = "FTD_Data.RDS")
# saveRDS(total_dep,file = "Total_Deposit.RDS")
df <- readRDS("FTD_Data.RDS")
total_dep <-readRDS("Total_Deposit.RDS")
dbWriteTable(duckdb_conn,"FTD_data",df,overwrite = TRUE)
dbWriteTable(duckdb_conn,"Total_Dep_data",total_dep,overwrite = TRUE)
rm(df)
rm(total_dep)
df_pivoted <- tbl(duckdb_conn,"FTD_data")  |>
pivot_longer(cols = c('FTD_Amount_USD','STD_Amount_USD')
,names_to = "DepositType"
,values_to = "Deposit_USD"
) |>
mutate(has_STD = ifelse(is.na(STD_Date),0,1)) |>
collect()
dbWriteTable(duckdb_conn,"FTD_data_pivoted",df_pivoted,overwrite = TRUE)
rm(df_pivoted)
df_pivoted <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(Deposit_USD > 0) |>
collect()
df_summary <- tbl(duckdb_conn,"FTD_data_pivoted") |>
group_by(DepositType) |>
summarize(UAP = n_distinct(if_else(Deposit_USD > 0, Id, NULL))
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
collect()
df_pivoted1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
collect()
df_summary1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
group_by(DepositType) |>
summarize(UAP = n_distinct(if_else(Deposit_USD > 0, Id, NULL))
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
collect()
df_curr_summary <- tbl(duckdb_conn,"FTD_data_pivoted") |>
group_by(DepositType,Currency) |>
summarize(UAP = n_distinct(Id)
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
ungroup() |>
pivot_wider(names_from = DepositType
,values_from = c(mean,min,Q1,median,Q3,max,total)
,names_sep = " "
,values_fill = 0) |>
group_by(Currency) |>
summarise_all(sum) |>
collect()
df_curr_summary1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
group_by(DepositType,Currency) |>
summarize(UAP = n_distinct(Id)
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
ungroup() |>
pivot_wider(names_from = DepositType
,values_from = c(mean,min,Q1,median,Q3,max,total)
,names_sep = " "
,values_fill = 0) |>
group_by(Currency) |>
summarise_all(sum) |>
collect()
total_dep <- tbl(duckdb_conn,"Total_Dep_data") |>
collect()
transposed <- as.data.frame(t(df_summary))
colnames(transposed) <- transposed[1,]
transposed <- transposed[-1,]
diff <- transposed|>
mutate(diff = as.numeric(as.numeric(FTD_Amount_USD)-as.numeric(STD_Amount_USD)))
overall_test <- t.test(Deposit_USD~DepositType, data = df_pivoted, alternative = 'two.sided')
overall_test1 <- t.test(Deposit_USD~DepositType, data = df_pivoted1,paired =TRUE ,alternative = 'two.sided')
currency_test <- df_pivoted |>
filter(Deposit_USD > 0) |>
group_by(Currency) |>
rstatix::t_test(Deposit_USD~DepositType, alternative  = 'two.sided',paired = FALSE)
currency_test1 <- df_pivoted |>
filter(!is.na(Deposit_USD)) |>
group_by(Currency) |>
rstatix::t_test(Deposit_USD~DepositType, alternative  = 'two.sided',paired = FALSE)
z.score <- function(x) coalesce((x-mean(x,na.rm=T))/sd(x,na.rm = T),0)
upper <- function(x) quantile(x,0.75) + (1.5*IQR(x))
df <- tbl(duckdb_conn,"FTD_data") |>
collect() |>
mutate(has_STD =  ifelse(!is.na(STD_Date),1,0)
,FTDq3 = quantile(FTD_Amount_USD,0.75)
,STDq3 = quantile(STD_Amount_USD,0.75)
,FTDz = z.score(FTD_Amount_USD)
,STDz = z.score(STD_Amount_USD)
,FTDu = upper(FTD_Amount_USD)
,STDu = upper(STD_Amount_USD)
,FTDoz = ifelse(abs(FTDz) <= 3.5,0,1)
,FTDou = ifelse(FTD_Amount_USD <=FTDu,0,1)
,STDoz = ifelse(abs(STDz) <= 3.5,0,1)
,STDou = ifelse(STD_Amount_USD <=STDu,0,1)
)
df_25pct <- df |>
filter(FTD_Amount_USD >=FTDq3)
df_25pct_summary <- df_25pct |>
group_by(Viplevel) |>
summarise(UAP = n_distinct(Id))
intro <- paste0("In this section, will analyze whether there is a statistically significant difference between the first deposit and second deposit amounts of First-Time Depositors (FTDs). Additionally, will specifically examine the subset of FTDs who have made a second deposit and determine if there is a significant difference between their first deposit amount and second deposit amount. Furthermore, will assess whether the VIP level of the FTDs has a significant effect on their likelihood of making a second deposit. This analysis aims to provide insights into the factors that influence FTDs' second deposit behavior. The data used in this analysis spans from January 1, 2023, to September 30, 2023.")
total_diff_overall <- (df_summary$total[tolower(df_summary$DepositType) %like% 'ftd%'] - df_summary$total[tolower(df_summary$DepositType) %like% 'std%'])
mean_diff_overall <- (df_summary$mean[tolower(df_summary$DepositType) %like% 'ftd%'] - df_summary$mean[tolower(df_summary$DepositType) %like% 'std%'])
high_low <- ifelse(mean_diff_overall > 0,'higher','lower')
mean_diff_overall <- mean_diff_overall |> scales::dollar()
median_diff_overall <- (df_summary$median[tolower(df_summary$DepositType) %like% 'ftd%'] - df_summary$median[tolower(df_summary$DepositType) %like% 'std%'])
median_diff_overall <- median_diff_overall |> scales::dollar()
cond_overall <- ifelse(overall_test$p.value <= 0.05
, paste0("The FTDs first deposit is significantly ", high_low," compared to second deposit with a mean difference of<b> ",mean_diff_overall," </b> and a median difference of<b> ",median_diff_overall,"</b>.")
,paste0("The FTDs first deposit is ", high_low," compared to second deposit with a mean difference of<b> ",mean_diff_overall," </b> and a median difference of<b> ",median_diff_overall," </b>. However the difference is not statistically significant."))
p1 <- paste0("There is a total of <b>", df_summary$UAP[tolower(df_summary$DepositType) %like% "ftd%"] |> scales::comma()," </b>First-Time Depositors (FTDs). The FTDs collectively accumulated a total deposit amount of <b>",sum(total_dep$Deposit_Amount_USD) |> scales::dollar(),"</b>, with <b>",paste0((sum(df_summary$total[tolower(df_summary$DepositType) %like% 'ftd%'])/sum(total_dep$Deposit_Amount_USD)) |> scales::percent(accuracy = 0.01)," (",sum(df_summary$total[tolower(df_summary$DepositType) %like% 'ftd%']) |> scales::dollar(),")"),"</b> of this amount came from their first deposit, and <b>",paste0((sum(df_summary$total[tolower(df_summary$DepositType) %like% 'std%'])/sum(total_dep$Deposit_Amount_USD)) |> scales::percent(accuracy = 0.01)," (",sum(df_summary$total[tolower(df_summary$DepositType) %like% 'std%']) |> scales::dollar(),")"),"</b>  originated from their second deposit."
,"FTDs first deposit amount has a mean of",
,cond_overall)
df_summary$median[tolower(df_summary$DepositType) %like% 'ftd%']
df_summary1$total[tolower(df_summary1$DepositType) %like% 'std%']
df_summary1$mean[tolower(df_summary1$DepositType) %like% 'ftd%']
df_summary1$mean[tolower(df_summary1$DepositType) %like% 'std%']
# df <- dbGetQuery(dwh_conn,"
#                  			SELECT
#               				dp.Id
#               				,dc.Code Currency
#                               ,dateadd(hour,8,FirstDepositDate) FTD_Date
#                               ,dp.FirstDepositAmount/FirstDepositExchRate FTD_Amount_USD
#                               ,dpl.Viplevel
#                               ,sec_dep.STD_Date
#                               ,isnull(sec_dep.STD_Amount_USD,0) STD_Amount_USD
#                               FROM DWH.WH.DimPlayer dp with (nolock)
#                               INNER JOIN DWH.WH.DimCurrency dc with (nolock) on dp.CurrencyID = dc.Id
#                               INNER JOIN DWH.WH.DimLoyaltyProgramLevel dpl with  (nolock) on dp.VIPLevelId = dpl.Id
#                               LEFT JOIN (
#                               	SELECT
#                               	pt.PlayerId
#                               	,dateadd(hour,8,pt.StartTime) STD_Date
#                               	,pt.Amount/isnull(fx.rate,1) STD_Amount_USD
#                               	,row_number() over (partition by pt.playerid order by pt.StartTime) rankie
#                               	FROM DWH.Payment.PaymentTransaction pt with (nolock)
#                                   INNER JOIN DWH.WH.DimTime dt with (nolock) on pt.TimeId = dt.Id
#                                   INNER JOIN DWH.WH.FactExchangeRates fx with (nolock) on dt.TimeId12MNUTC0 = fx.TimeId
#                                   and pt.CurrencyId = fx.CurrencyId
#                                   WHERE 1=1
#                                   AND pt.StartTime >= dateadd(hour,-8,'2023-01-01')
#                               AND pt.StartTime < dateadd(hour,-8,'2023-10-01')
#                               AND pt.TransactionTypeId in (1,27)
#                           	  AND pt.StatusId = 3
#                           ) sec_dep on dp.Id = sec_dep.PlayerId and rankie = 2
#                           WHERE 1=1
#                           AND dp.BrandId = 2
#                           AND dp.IsInternalAccount = 0
#                           AND dp.City != 'm_test_only'
#                           AND NOT dp.RisklevelName in ('Affiliate','Test')
#                           AND dc.Code in ('VND','CNY','THB','IDR')
#                           AND dp.FirstDepositDate >= dateadd(hour,-8,'2023-01-01')
#                           AND dp.FirstDepositDate < dateadd(hour,-8,'2023-10-01')
# ")
#
# total_dep <- dbGetQuery(dwh_conn,"
#                         SELECT
#                         pt.PlayerId
#                         ,sum(pt.Amount/isnull(fx.rate,1)) Deposit_Amount_USD
#                         FROM DWH.Payment.PaymentTransaction pt with (nolock)
#                         INNER JOIN DWH.WH.DimPlayer dp with (nolock) on pt.PlayerID = dp.Id
#                         INNER JOIN DWH.WH.DimCurrency dc with (nolock) on dp.CurrencyID = dc.Id
#                         INNER JOIN DWH.WH.DimTime dt with (nolock) on pt.TimeId = dt.Id
#                         INNER JOIN DWH.WH.FactExchangeRates fx with (nolock) on dt.TimeId12MNUTC0 = fx.TimeId
#                         and pt.CurrencyId = fx.CurrencyId
#                         WHERE 1=1
#                         AND pt.StartTime >= dateadd(hour,-8,'2023-01-01')
#                         AND pt.StartTime < dateadd(hour,-8,'2023-10-01')
#                         AND pt.TransactionTypeId in (1,27)
#                         AND pt.StatusId = 3
#                         AND dp.BrandId = 2
#                         AND dp.IsInternalAccount = 0
#                         AND dp.City != 'm_test_only'
#                         AND NOT dp.RisklevelName in ('Affiliate','Test')
#                         AND dc.Code in ('VND','CNY','THB','IDR')
#                         AND dp.FirstDepositDate >= dateadd(hour,-8,'2023-01-01')
#                         AND dp.FirstDepositDate < dateadd(hour,-8,'2023-10-01')
#                         GROUP BY
#                         pt.PlayerId"
# )
#
#
# dbDisconnect(dwh_conn)
#
# saveRDS(df,file = "FTD_Data.RDS")
# saveRDS(total_dep,file = "Total_Deposit.RDS")
df <- readRDS("FTD_Data.RDS")
total_dep <-readRDS("Total_Deposit.RDS")
dbWriteTable(duckdb_conn,"FTD_data",df,overwrite = TRUE)
dbWriteTable(duckdb_conn,"Total_Dep_data",total_dep,overwrite = TRUE)
rm(df)
rm(total_dep)
df_pivoted <- tbl(duckdb_conn,"FTD_data")  |>
pivot_longer(cols = c('FTD_Amount_USD','STD_Amount_USD')
,names_to = "DepositType"
,values_to = "Deposit_USD"
) |>
mutate(has_STD = ifelse(is.na(STD_Date),0,1)) |>
collect()
dbWriteTable(duckdb_conn,"FTD_data_pivoted",df_pivoted,overwrite = TRUE)
rm(df_pivoted)
df_pivoted <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(Deposit_USD > 0) |>
collect()
df_summary <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(Deposit_USD > 0) |>
group_by(DepositType) |>
summarize(UAP = n_distinct(if_else(Deposit_USD > 0, Id, NULL))
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
collect()
df_pivoted1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
collect()
df_summary1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
group_by(DepositType) |>
summarize(UAP = n_distinct(if_else(Deposit_USD > 0, Id, NULL))
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
collect()
df_curr_summary <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(Deposit_USD > 0) |>
group_by(DepositType,Currency) |>
summarize(UAP = n_distinct(Id)
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
ungroup() |>
pivot_wider(names_from = DepositType
,values_from = c(mean,min,Q1,median,Q3,max,total)
,names_sep = " "
,values_fill = 0) |>
group_by(Currency) |>
summarise_all(sum) |>
collect()
df_curr_summary1 <- tbl(duckdb_conn,"FTD_data_pivoted") |>
filter(has_STD == 1) |>
group_by(DepositType,Currency) |>
summarize(UAP = n_distinct(Id)
,mean = mean(Deposit_USD)
,min = min(Deposit_USD)
,Q1 = quantile(Deposit_USD,0.25)
,median = median(Deposit_USD)
,Q3 = quantile(Deposit_USD,0.75)
,max = max(Deposit_USD)
,total = sum(Deposit_USD)) |>
ungroup() |>
pivot_wider(names_from = DepositType
,values_from = c(mean,min,Q1,median,Q3,max,total)
,names_sep = " "
,values_fill = 0) |>
group_by(Currency) |>
summarise_all(sum) |>
collect()
total_dep <- tbl(duckdb_conn,"Total_Dep_data") |>
collect()
transposed <- as.data.frame(t(df_summary))
colnames(transposed) <- transposed[1,]
transposed <- transposed[-1,]
diff <- transposed|>
mutate(diff = as.numeric(as.numeric(FTD_Amount_USD)-as.numeric(STD_Amount_USD)))
overall_test <- t.test(Deposit_USD~DepositType, data = df_pivoted, alternative = 'two.sided')
overall_test1 <- t.test(Deposit_USD~DepositType, data = df_pivoted1,paired =TRUE ,alternative = 'two.sided')
currency_test <- df_pivoted |>
filter(Deposit_USD > 0) |>
group_by(Currency) |>
rstatix::t_test(Deposit_USD~DepositType, alternative  = 'two.sided',paired = FALSE)
currency_test1 <- df_pivoted |>
filter(!is.na(Deposit_USD)) |>
group_by(Currency) |>
rstatix::t_test(Deposit_USD~DepositType, alternative  = 'two.sided',paired = FALSE)
z.score <- function(x) coalesce((x-mean(x,na.rm=T))/sd(x,na.rm = T),0)
upper <- function(x) quantile(x,0.75) + (1.5*IQR(x))
df <- tbl(duckdb_conn,"FTD_data") |>
collect() |>
mutate(has_STD =  ifelse(!is.na(STD_Date),1,0)
,FTDq3 = quantile(FTD_Amount_USD,0.75)
,STDq3 = quantile(STD_Amount_USD,0.75)
,FTDz = z.score(FTD_Amount_USD)
,STDz = z.score(STD_Amount_USD)
,FTDu = upper(FTD_Amount_USD)
,STDu = upper(STD_Amount_USD)
,FTDoz = ifelse(abs(FTDz) <= 3.5,0,1)
,FTDou = ifelse(FTD_Amount_USD <=FTDu,0,1)
,STDoz = ifelse(abs(STDz) <= 3.5,0,1)
,STDou = ifelse(STD_Amount_USD <=STDu,0,1)
)
df_25pct <- df |>
filter(FTD_Amount_USD >=FTDq3)
df_25pct_summary <- df_25pct |>
group_by(Viplevel) |>
summarise(UAP = n_distinct(Id))
overall_test
overall_test1
67.53 -9.72
67.53 -78.18
inc_dec <-ifelse(mean_diff_currency > 0,'increase','decrease')
mean_diff_currency <- mean_diff_currency |> scales::dollar()
total_diff_currency <- (df_curr_summary$`total FTD_Amount_USD`[df_curr_summary$Currency == "THB"]- df_curr_summary$`total STD_Amount_USD`[df_curr_summary$Currency == "THB"])
mean_diff_currency <- (df_curr_summary$`mean FTD_Amount_USD`[df_curr_summary$Currency == "THB"]- df_curr_summary$`mean STD_Amount_USD`[df_curr_summary$Currency == "THB"])
mean_diff_currency <- mean_diff_currency |> scales::dollar()
high_low_curr <- ifelse(mean_diff_currency > 0,'higher','lower')
inc_dec <-ifelse(mean_diff_currency > 0,'increase','decrease')
inc_dec
mean_diff_currency
