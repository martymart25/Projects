{
    "type": [
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        2
    ],
    "data": [
        "\nR version 4.3.1 (2023-06-16 ucrt) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "knitr::opts_chunk$set(echo = FALSE)",
        "> ",
        "setwd(\"C://Users//raymart.biasbas//Documents//Proyekto//LD Segmentation//LD Player Segmentation\")",
        "> ",
        "",
        "> ",
        "getwd()",
        "[1] \"C:/Users/raymart.biasbas/Documents/Proyekto/LD Segmentation/LD Player Segmentation\"\n",
        "> ",
        "library(DBI)",
        "> ",
        "library(odbc)",
        "> ",
        "library(keyring)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(tidyr)",
        "> ",
        "library(datawizard)",
        "> ",
        "Sys.setenv(TZ = 'UTC')",
        "> ",
        "",
        "> ",
        "con <- dbConnect(odbc(),\"DA\",",
        "+ ",
        "                   uid = key_get(\"db_user\"),",
        "+ ",
        "                   pwd = key_get(\"db_pass\"),",
        "+ ",
        "                  encoding = \"UTF-8\")",
        "> ",
        "",
        "> ",
        "ld_df_raw <- dbGetQuery(con,\"",
        "+ ",
        "              With lt as (",
        "+ ",
        "              SELECT",
        "+ ",
        "              Playerid",
        "+ ",
        "              ,Currencycode",
        "+ ",
        "              ,[Game Type] ",
        "+ ",
        "              ,[Vendor Name] ",
        "+ ",
        "              ,sum([Active Days Per Month]) LT_Active_Days",
        "+ ",
        "              ,sum([Bet Count]) LT_Bet_Count",
        "+ ",
        "              ,sum([Turnover Usd]) LT_Turnover_USD",
        "+ ",
        "              ,sum([Ggr Usd]) LT_GGR_USD",
        "+ ",
        "              FROM ref_db.ray.ld_players_data (nolock)",
        "+ ",
        "              GROUP BY",
        "+ ",
        "              Playerid",
        "+ ",
        "              ,Currencycode",
        "+ ",
        "              ,[Game Type] ",
        "+ ",
        "              ,[Vendor Name]",
        "+ ",
        "              )",
        "+ ",
        "              SELECT ",
        "+ ",
        "              t.*",
        "+ ",
        "              ,lt.LT_Active_Days",
        "+ ",
        "              ,lt.LT_Bet_Count",
        "+ ",
        "              ,lt.LT_Turnover_USD",
        "+ ",
        "              ,lt.LT_GGR_USD",
        "+ ",
        "              FROM ref_db.ray.ld_players_data t (nolock) ",
        "+ ",
        "              LEFT JOIN lt on t.Playerid = lt.Playerid",
        "+ ",
        "              and t.Currencycode = lt.Currencycode",
        "+ ",
        "              and t.[Game Type] = lt.[Game Type]",
        "+ ",
        "              and t.[Vendor Name] = lt.[Vendor Name]",
        "+ ",
        "              WHERE 1=1",
        "+ ",
        "              AND [Activity Month] = DATEADD(day,1,EOMONTH(cast(dateadd(hour,8,GETDATE()) as DATE),-2))",
        "+ ",
        "                        \")",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "ld_df <- ld_df_raw |>",
        "+ ",
        "  mutate(Playerid = as.integer(Playerid),",
        "+ ",
        "         `Activity Month` = as.Date(`Activity Month`))",
        "> ",
        "",
        "> ",
        "str(ld_df)",
        "'data.frame':\t31804 obs. of  14 variables:\n $ Game Type            : chr  \"Blackjack\" \"Roulette\" \"Baccarat\" \"Sicbo\" ...\n $ Activity Month       : Date, format: \"2023-06-01\" ...\n $ Playerid             : int  445023 445023 481747 482374 517087 535486 540618 565904 572752 575891 ...\n $ Username             : chr  \"IXXXI\" \"IXXXI\" \"baster9164\" \"mikejenonk\" ...\n $ Currencycode         : chr  \"IDR\" \"IDR\" \"IDR\" \"IDR\" ...\n $ Vendor Name          : chr  \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\"",
        " ...\n $ Active Days Per Month: num  11 1 15 2 10 6 2 4 7 21 ...\n $ Bet Count            : num  429 7 1240 13 37 241 39 28 113 400 ...\n $ Turnover Usd         : num  4936.5 25.3 1936.6 355.2 112.5 ...\n $ Ggr Usd              : num  3.74e+02 1.20e+01 8.77 1.48e+02 1.00e-08 ...\n $ LT_Active_Days       : num  29 1 309 189 95 43 25 529 88 445 ...\n $ LT_Bet_Count         : num  960 7 31443 1906 1799 ...\n $ LT_Turnover_USD      : num  9954.2 25.3 47282.7 22478 6741 ...\n $ LT_GGR_USD           : num  677.6 12 418 1568 88.2",
        " ...\n",
        "> ",
        "",
        "> ",
        "## Data Cleaning",
        "> ",
        "ld_df[ld_df$`Turnover Usd` == 0 & ld_df$`Ggr Usd` == 0 |",
        "+ ",
        "        ld_df$`Bet Count` == 0,] <- NA",
        "> ",
        "",
        "> ",
        "ld_cleaned <- ld_df |>",
        "+ ",
        "  drop_na()",
        "> ",
        "",
        "> ",
        "str(ld_cleaned)",
        "'data.frame':\t31791 obs. of  14 variables:\n $ Game Type            : chr  \"Blackjack\" \"Roulette\" \"Baccarat\" \"Sicbo\" ...\n $ Activity Month       : Date, format: \"2023-06-01\" ...\n $ Playerid             : int  445023 445023 481747 482374 517087 535486 540618 565904 572752 575891 ...\n $ Username             : chr  \"IXXXI\" \"IXXXI\" \"baster9164\" \"mikejenonk\" ...\n $ Currencycode         : chr  \"IDR\" \"IDR\" \"IDR\" \"IDR\" ...\n $ Vendor Name          : chr  \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\" \"Pragmatic Live Dealer\"",
        " ...\n $ Active Days Per Month: num  11 1 15 2 10 6 2 4 7 21 ...\n $ Bet Count            : num  429 7 1240 13 37 241 39 28 113 400 ...\n $ Turnover Usd         : num  4936.5 25.3 1936.6 355.2 112.5 ...\n $ Ggr Usd              : num  3.74e+02 1.20e+01 8.77 1.48e+02 1.00e-08 ...\n $ LT_Active_Days       : num  29 1 309 189 95 43 25 529 88 445 ...\n $ LT_Bet_Count         : num  960 7 31443 1906 1799 ...\n $ LT_Turnover_USD      : num  9954.2 25.3 47282.7 22478 6741 ...\n $ LT_GGR_USD           : num  677.6 12 418 1568 88.2",
        " ...\n",
        "> ",
        "",
        "> ",
        "# ld_cleaned <- ld_cleaned |>",
        "> ",
        "#   group_by(Playerid,`Game Type`,`Vendor Name`) |>",
        "> ",
        "#   arrange(`Activity Month`) |>",
        "> ",
        "#   mutate(LT_Active_Days = cumsum(`Active Days Per Month`),",
        "> ",
        "#          LT_Bet_Count = cumsum(`Bet Count`),",
        "> ",
        "#          LT_Turnover_USD = cumsum(`Turnover Usd`),",
        "> ",
        "#          LT_GGR_USD = cumsum(`Ggr Usd`))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "scoring <- function(x) {",
        "+ ",
        "  res <- as.integer()",
        "+ ",
        "  for(i in 1:length(x)) {",
        "+ ",
        "    if(x[i] >= 3.5) {",
        "+ ",
        "     res[i] <- 4",
        "+ ",
        "    } ",
        "+ ",
        "    else if (x[i] >= 0 & x[i] < 3.5){",
        "+ ",
        "      res[i] <- 3",
        "+ ",
        "    }",
        "+ ",
        "    else if (x[i] > -3.5 & x[i] < 0){",
        "+ ",
        "      res[i] <- 2",
        "+ ",
        "    }",
        "+ ",
        "    else if (x[i] <= -3.5) {",
        "+ ",
        "      res[i] <- 1",
        "+ ",
        "    }",
        "+ ",
        "    else{res[i] <- 0}",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        "  res",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "r.zscore <- function(x) coalesce((x-median(x,na.rm=T))/mad(x,na.rm = T),0)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "Segments <- function(x) {",
        "+ ",
        "  res <- c()",
        "+ ",
        "",
        "+ ",
        "  for(i in 1:length(x)) {",
        "+ ",
        "    if (x[i] == 444) {",
        "+ ",
        "      res[i] <- \"Profitable Outlier\"",
        "+ ",
        "    }",
        "+ ",
        "    else if (x[i] >= 311 & x[i] < 444 ) {",
        "+ ",
        "      res[i] <- \"Profitable\"",
        "+ ",
        "    }",
        "+ ",
        "    else if (x[i] > 144 & x[i] < 311 | x[i] < 144) {",
        "+ ",
        "      res[i] <- \"Grinder\"",
        "+ ",
        "    }",
        "+ ",
        "    else if (x[i] == 144) {",
        "+ ",
        "      res[i] <- \"Grinder Outlier\"",
        "+ ",
        "    } else {NULL}",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        "  res",
        "+ ",
        "  ",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ld_per_player <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,`Activity Month`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,",
        "+ ",
        "         LT_Bet_Count = sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>",
        "+ ",
        "  ungroup() |>",
        "+ ",
        "  mutate(",
        "+ ",
        "       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),",
        "+ ",
        "       LT_Bet_Count_scale = r.zscore(LT_Bet_Count),",
        "+ ",
        "       LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),",
        "+ ",
        "       LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ld_per_player <- ld_per_player |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,",
        "+ ",
        "       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),",
        "+ ",
        "       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),",
        "+ ",
        "       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),",
        "+ ",
        "       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_player <- ld_per_player |>",
        "+ ",
        "  mutate(Overall.Month.Segment = Segments(Month_Overall_score),",
        "+ ",
        "         Overall.LT.Segment = Segments(LT_Overall_score))",
        "> ",
        "ld_per_player_curr <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,Currencycode,`Activity Month`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,",
        "+ ",
        "         LT_Bet_Count = sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>",
        "+ ",
        "  ungroup()",
        "> ",
        "",
        "> ",
        "ld_per_player_curr <- ld_per_player_curr |>",
        "+ ",
        "  group_by(Currencycode,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),",
        "+ ",
        "     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),",
        "+ ",
        "     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),",
        "+ ",
        "     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(ld_per_player_curr,function(x)sum(is.na(x)))",
        "                    Playerid                 Currencycode \n                           0                            0 \n              Activity Month              Month_Bet_Count \n                           0                            0 \n      Month_AVG_Turnover_USD            Month_AVG_GGR_USD \n                           0                            0 \n                LT_Bet_Count          LT_AVG_Turnover_USD \n                           0                            0 \n              LT_AVG_GGR_USD        Month_Bet_Count_scale ",
        "\n                           0                            0 \nMonth_AVG_Turnover_USD_scale      Month_AVG_GGR_USD_scale \n                           0                            0 \n          LT_Bet_Count_scale    LT_AVG_Turnover_USD_scale \n                           0                            0 \n        LT_AVG_GGR_USD_scale \n                           0 \n",
        "> ",
        "",
        "> ",
        "ld_per_player_curr <- ld_per_player_curr |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,",
        "+ ",
        "       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),",
        "+ ",
        "       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),",
        "+ ",
        "       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),",
        "+ ",
        "       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_player_curr <- ld_per_player_curr |>",
        "+ ",
        "  mutate(Currency.Month.Segment = Segments(Month_Overall_score),",
        "+ ",
        "         Currency.LT.Segment = Segments(LT_Overall_score))                                                ",
        "> ",
        "ld_per_player_game <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,`Activity Month`,`Game Type`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,",
        "+ ",
        "         LT_Bet_Count = sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>",
        "+ ",
        "  ungroup()",
        "> ",
        "",
        "> ",
        "ld_per_player_game <- ld_per_player_game |>",
        "+ ",
        "  group_by(`Game Type`,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),",
        "+ ",
        "     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),",
        "+ ",
        "     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),",
        "+ ",
        "     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(ld_per_player_game,function(x)sum(is.na(x)))",
        "                    Playerid               Activity Month \n                           0                            0 \n                   Game Type              Month_Bet_Count \n                           0                            0 \n      Month_AVG_Turnover_USD            Month_AVG_GGR_USD \n                           0                            0 \n                LT_Bet_Count          LT_AVG_Turnover_USD \n                           0                            0 \n              LT_AVG_GGR_USD        Month_Bet_Count_scale ",
        "\n                           0                            0 \nMonth_AVG_Turnover_USD_scale      Month_AVG_GGR_USD_scale \n                           0                            0 \n          LT_Bet_Count_scale    LT_AVG_Turnover_USD_scale \n                           0                            0 \n        LT_AVG_GGR_USD_scale \n                           0 \n",
        "> ",
        "",
        "> ",
        "ld_per_player_game <- ld_per_player_game |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,",
        "+ ",
        "       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),",
        "+ ",
        "       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),",
        "+ ",
        "       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),",
        "+ ",
        "       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_player_game <- ld_per_player_game |>",
        "+ ",
        "  mutate(GameType.Month.Segment = Segments(Month_Overall_score),",
        "+ ",
        "         GameType.LT.Segment = Segments(LT_Overall_score))  ",
        "> ",
        "",
        "> ",
        "ld_per_player_Vendor <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,`Activity Month`,`Vendor Name`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count,",
        "+ ",
        "         LT_Bet_Count = sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_Turnover_USD = sum(LT_Turnover_USD)/sum(LT_Bet_Count),",
        "+ ",
        "         LT_AVG_GGR_USD = sum(LT_GGR_USD)/sum(LT_Bet_Count)) |>",
        "+ ",
        "  ungroup()",
        "> ",
        "",
        "> ",
        "ld_per_player_Vendor <- ld_per_player_Vendor |>",
        "+ ",
        "  group_by(`Vendor Name`,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "     Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "     Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "     Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),",
        "+ ",
        "     LT_Bet_Count_scale = r.zscore(LT_Bet_Count),",
        "+ ",
        "     LT_AVG_Turnover_USD_scale = r.zscore(LT_AVG_Turnover_USD),",
        "+ ",
        "     LT_AVG_GGR_USD_scale = r.zscore(LT_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ld_per_player_Vendor <- ld_per_player_Vendor |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Overall_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score,",
        "+ ",
        "       LT_Bet_Count_score = scoring(LT_Bet_Count_scale),",
        "+ ",
        "       LT_Turnover_USD_score = scoring(LT_AVG_Turnover_USD_scale),",
        "+ ",
        "       LT_GGR_USD_score = scoring(LT_AVG_GGR_USD_scale),",
        "+ ",
        "       LT_Overall_score = LT_GGR_USD_score*100+LT_Turnover_USD_score*10+LT_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_player_Vendor <- ld_per_player_Vendor |>",
        "+ ",
        "  mutate(Vendor.Month.Segment = Segments(Month_Overall_score),",
        "+ ",
        "         Vendor.LT.Segment = Segments(LT_Overall_score))  ",
        "> ",
        "ld_per_month_curr <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,Currencycode,`Activity Month`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>",
        "+ ",
        "  ungroup() ",
        "> ",
        "",
        "> ",
        "ld_per_month_curr <- ld_per_month_curr |>",
        "+ ",
        "  group_by(Currencycode,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD),",
        "+ ",
        "       median = median(Month_Bet_Count),",
        "+ ",
        "       mad = mad(Month_Bet_Count))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(ld_per_month_curr,function(x)sum(is.na(x)))",
        "                    Playerid                 Currencycode \n                           0                            0 \n              Activity Month              Month_Bet_Count \n                           0                            0 \n      Month_AVG_Turnover_USD            Month_AVG_GGR_USD \n                           0                            0 \n       Month_Bet_Count_scale Month_AVG_Turnover_USD_scale \n                           0                            0 \n     Month_AVG_GGR_USD_scale                       median ",
        "\n                           0                            0 \n                         mad \n                           0 \n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "test <- ld_per_month_curr[!complete.cases(ld_per_month_curr),]",
        "> ",
        "",
        "> ",
        "ld_per_month_curr <- ld_per_month_curr |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Curreny_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_month_curr <- ld_per_month_curr |>",
        "+ ",
        "  mutate(Month.Currency.Segment = Segments(Month_Curreny_score))",
        "> ",
        "",
        "> ",
        "ld_per_month_gamet <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,`Game Type`,`Activity Month`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>",
        "+ ",
        "  ungroup() ",
        "> ",
        "",
        "> ",
        "ld_per_month_gamet <- ld_per_month_gamet |>",
        "+ ",
        "  group_by(`Game Type`,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(ld_per_month_gamet,function(x)sum(is.na(x)))",
        "                    Playerid                    Game Type \n                           0                            0 \n              Activity Month              Month_Bet_Count \n                           0                            0 \n      Month_AVG_Turnover_USD            Month_AVG_GGR_USD \n                           0                            0 \n       Month_Bet_Count_scale Month_AVG_Turnover_USD_scale \n                           0                            0 \n     Month_AVG_GGR_USD_scale \n                           0 ",
        "\n",
        "> ",
        "",
        "> ",
        "ld_per_month_gamet <- ld_per_month_gamet |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Game_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_month_gamet <- ld_per_month_gamet |>",
        "+ ",
        "  mutate(Month.Game.Segment = Segments(Month_Game_score))",
        "> ",
        "",
        "> ",
        "ld_per_month_vendor <- ld_cleaned |>",
        "+ ",
        "  group_by(Playerid,`Vendor Name`,`Activity Month`) |>",
        "+ ",
        "  reframe(",
        "+ ",
        "         Month_Bet_Count = sum(`Bet Count`),",
        "+ ",
        "         Month_AVG_Turnover_USD = sum(`Turnover Usd`)/Month_Bet_Count,",
        "+ ",
        "         Month_AVG_GGR_USD = sum(`Ggr Usd`)/Month_Bet_Count) |>",
        "+ ",
        "  ungroup() ",
        "> ",
        "",
        "> ",
        "ld_per_month_vendor <- ld_per_month_vendor |>",
        "+ ",
        "  group_by(`Vendor Name`,`Activity Month`) |>",
        "+ ",
        "  mutate(",
        "+ ",
        "       Month_Bet_Count_scale = r.zscore(Month_Bet_Count),",
        "+ ",
        "       Month_AVG_Turnover_USD_scale = r.zscore(Month_AVG_Turnover_USD),",
        "+ ",
        "       Month_AVG_GGR_USD_scale = r.zscore(Month_AVG_GGR_USD))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(ld_per_month_vendor,function(x)sum(is.na(x)))",
        "                    Playerid                  Vendor Name \n                           0                            0 \n              Activity Month              Month_Bet_Count \n                           0                            0 \n      Month_AVG_Turnover_USD            Month_AVG_GGR_USD \n                           0                            0 \n       Month_Bet_Count_scale Month_AVG_Turnover_USD_scale \n                           0                            0 \n     Month_AVG_GGR_USD_scale \n                           0 ",
        "\n",
        "> ",
        "",
        "> ",
        "ld_per_month_vendor <- ld_per_month_vendor |>",
        "+ ",
        "   mutate(",
        "+ ",
        "       Month_Bet_Count_score = scoring(Month_Bet_Count_scale),",
        "+ ",
        "       Month_Turnover_USD_score = scoring(Month_AVG_Turnover_USD_scale),",
        "+ ",
        "       Month_GGR_USD_score = scoring(Month_AVG_GGR_USD_scale),",
        "+ ",
        "       Month_Vendor_score = Month_GGR_USD_score*100+Month_Turnover_USD_score*10+Month_Bet_Count_score)",
        "> ",
        "",
        "> ",
        "ld_per_month_vendor <- ld_per_month_vendor |>",
        "+ ",
        "  mutate(Month.Vendor.Segment = Segments(Month_Vendor_score))",
        "> ",
        "",
        "> ",
        "ld_full <- ld_cleaned |>",
        "+ ",
        "  left_join(ld_per_player |>",
        "+ ",
        "              select(`Activity Month`,Playerid,Overall.Month.Segment,Overall.LT.Segment),",
        "+ ",
        "            by = c(\"Activity Month\",\"Playerid\")) |>",
        "+ ",
        "  left_join(ld_per_player_curr |>",
        "+ ",
        "              select(`Activity Month`,Playerid,Currencycode,",
        "+ ",
        "                     Currency.Month.Segment,Currency.LT.Segment),",
        "+ ",
        "            by = c(\"Activity Month\",\"Playerid\",\"Currencycode\")) |>",
        "+ ",
        "  left_join(ld_per_player_game |>",
        "+ ",
        "              select(`Activity Month`,Playerid,`Game Type`,",
        "+ ",
        "                     GameType.Month.Segment,GameType.LT.Segment),",
        "+ ",
        "            by = c(\"Activity Month\",\"Playerid\",\"Game Type\")) |>",
        "+ ",
        "  left_join(ld_per_player_Vendor |>",
        "+ ",
        "              select(`Activity Month`,Playerid,`Vendor Name`,",
        "+ ",
        "                     Vendor.Month.Segment,Vendor.LT.Segment),",
        "+ ",
        "            by = c(\"Activity Month\",\"Playerid\",\"Vendor Name\"))",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mytable <- dbConnect(odbc(),\"mytable\",",
        "+ ",
        "                       uid = key_get(\"db_user\"),",
        "+ ",
        "                       pwd = key_get(\"db_pass\"))",
        "> ",
        "",
        "> ",
        "dbWriteTable(mytable,SQL(\"ref_db.ray.ld_segmentation\"),ld_full)",
        "Error: Table ref_db.ray.ld_segmentation exists in database, and both overwrite and append are FALSE\n",
        "> ",
        "dbWriteTable(mytable,SQL(\"ref_db.ray.ld_segmentation\"),ld_full,append = T)",
        "Error: nanodbc/nanodbc.cpp:1752: 42000: [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Game Type'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Activity Month'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Vendor Name'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Active Days Per Month'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Bet Count'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Turnover Usd'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Ggr Usd'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Overall.Month.Segment'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Overall.LT.Segment'.  [Microsoft][SQL Server Native Client 11.0][SQL Server]Invalid column name 'Currency.Month.Segment'.  [Microsoft][SQL Server Nat\n",
        "> ",
        " colnames(ld_full)",
        " [1] \"Game Type\"              \"Activity Month\"        \n [3] \"Playerid\"               \"Username\"              \n [5] \"Currencycode\"           \"Vendor Name\"           \n [7] \"Active Days Per Month\"  \"Bet Count\"             \n [9] \"Turnover Usd\"           \"Ggr Usd\"               \n[11] \"LT_Active_Days\"         \"LT_Bet_Count\"          \n[13] \"LT_Turnover_USD\"        \"LT_GGR_USD\"            \n[15] \"Overall.Month.Segment\"  \"Overall.LT.Segment\"    \n[17] \"Currency.Month.Segment\" \"Currency.LT.Segment\"   \n[19] \"GameType.Month.Segment\"",
        " \"GameType.LT.Segment\"   \n[21] \"Vendor.Month.Segment\"   \"Vendor.LT.Segment\"     \n",
        "> ",
        "sub(\".\",\"test.n\")",
        "Error in sub(\".\", \"test.n\") : argument \"x\" is missing, with no default\n",
        "> ",
        "sub(\".\",\"\"\"test.n)",
        "+ ",
        "",
        "+ ",
        "sub(\".\",\"\",\"test.n\")",
        "Error: unexpected string constant in:\n\"\nsub(\"\"\n",
        "> ",
        "gsub(\".\",\"\"\"test.n)",
        "+ ",
        "gsub(\".\",\"\",\"test.n\")",
        "Error: unexpected string constant in:\n\"gsub(\".\",\"\"\"test.n)\ngsub(\"\"\n",
        "> ",
        "gsub(\".\",\"\",\"test.n\")",
        "[1] \"\"\n",
        "> ",
        "?gub",
        "No documentation for ‘gub’ in specified packages and libraries:\nyou could try ‘??gub’\n",
        "> ",
        "?gsub",
        "> ",
        "gsub('/','',\"test//\")",
        "[1] \"test\"\n",
        "> ",
        "gsub('/','',\"test/\")",
        "[1] \"test\"\n",
        "> ",
        "gsub('.','',\"test/\")",
        "[1] \"\"\n",
        "> ",
        "gsub('\\.','',\"test/\")",
        "Error: '\\.' is an unrecognized escape in character string (<input>:1:8)\n",
        "> ",
        "gsub('/.','',\"test/\")",
        "[1] \"test/\"\n",
        "> ",
        "gsub('/.','',\"test.\")",
        "[1] \"test.\"\n",
        "> ",
        "gsub('.','',\"test.\")",
        "[1] \"\"\n",
        "> ",
        "sub('.','',\"test.\")",
        "[1] \"est.\"\n",
        "> ",
        "sub('.//','',\"test.\")",
        "[1] \"test.\"\n",
        "> ",
        "sub('\\.','',\"test.\")",
        "Error: '\\.' is an unrecognized escape in character string (<input>:1:7)\n",
        "> ",
        "sub('\\\\.','',\"test.\")",
        "[1] \"test\"\n",
        "> ",
        "sub('\\\\.','',\"test.\")",
        "[1] \"test\"\n",
        "> ",
        "gsub(\" \",\"\",gsub(\"\\\\.\",\"\",colnames(ld_full)))",
        " [1] \"GameType\"             \"ActivityMonth\"       \n [3] \"Playerid\"             \"Username\"            \n [5] \"Currencycode\"         \"VendorName\"          \n [7] \"ActiveDaysPerMonth\"   \"BetCount\"            \n [9] \"TurnoverUsd\"          \"GgrUsd\"              \n[11] \"LT_Active_Days\"       \"LT_Bet_Count\"        \n[13] \"LT_Turnover_USD\"      \"LT_GGR_USD\"          \n[15] \"OverallMonthSegment\"  \"OverallLTSegment\"    \n[17] \"CurrencyMonthSegment\" \"CurrencyLTSegment\"   \n[19] \"GameTypeMonthSegment\" \"GameTypeLTSegment\"   \n[21]",
        " \"VendorMonthSegment\"   \"VendorLTSegment\"     \n",
        "> ",
        "colnames(ld_full) <- gsub(\" \",\"\",gsub(\"\\\\.\",\"\",colnames(ld_full)))",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "\nRestarting R session...\n\n"
    ]
}